{"ast":null,"code":"var _jsxFileName = \"/Users/gavinshrader/Sites/gavinshr.com/src/components/Starfield/Starfield.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Starfield extends Component {\n  constructor(props) {\n    super(props);\n    this.animate = this.animate.bind(this);\n    this.updateDimensions = this.updateDimensions.bind(this);\n  }\n\n  componentDidMount() {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n    window.addEventListener(\"resize\", this.updateDimensions); // scene\n\n    this.scene = new THREE.Scene(); // camera\n\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 50);\n    this.camera.position.z = 30; // rendering\n\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    this.renderer.setClearColor(0x000000, 0);\n    this.renderer.setSize(width, height, false);\n    this.camera.aspect = width / height;\n    this.camera.updateProjectionMatrix();\n    this.renderer.render(this.scene, this.camera);\n    this.mount.appendChild(this.renderer.domElement); // sphere\n\n    const particleMat = new THREE.PointsMaterial({\n      color: 0xaecdd0,\n      size: 0.1,\n      map: new THREE.TextureLoader().load(\"/particle.jpg\"),\n      transparent: true,\n      blending: THREE.AdditiveBlending,\n      depthWrite: false\n    });\n    const particleGeo = new THREE.SphereGeometry(15, 300, 300);\n    particleGeo.vertices.forEach(function (vertex) {\n      vertex.x += Math.random() - 0.2;\n      vertex.y += Math.random() - 0.2;\n      vertex.z += Math.random() - 0.2;\n    });\n    const particleSystem = new THREE.Points(particleGeo, particleMat);\n    particleSystem.name = \"particleSystem\";\n    this.scene.add(particleSystem);\n    var lights = [];\n    lights[0] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[1] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[2] = new THREE.PointLight(0xffffff, 1, 0);\n    lights[0].position.set(0, 200, 0);\n    lights[1].position.set(100, 200, 100);\n    lights[2].position.set(-100, -200, -100);\n    this.scene.add(lights[0]);\n    this.scene.add(lights[1]);\n    this.scene.add(lights[2]);\n    this.renderer.render(this.scene, this.camera);\n    this.animate();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateDimensions);\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  animate() {\n    requestAnimationFrame(this.animate);\n    const particleSystem = this.scene.getObjectByName(\"particleSystem\");\n    particleSystem.rotation.y += 0.005;\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  updateDimensions() {\n    if (this.mount !== null) {\n      this.renderer.setSize(this.mount.clientWidth, this.mount.clientHeight);\n      this.camera.aspect = this.mount.clientWidth / this.mount.clientHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.render(this.scene, this.camera);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"boardCanvas\",\n        style: {\n          width: \"900px\",\n          height: \"500px\"\n        },\n        ref: mount => {\n          this.mount = mount;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Starfield;","map":{"version":3,"sources":["/Users/gavinshrader/Sites/gavinshr.com/src/components/Starfield/Starfield.js"],"names":["React","Component","ReactDOM","THREE","Starfield","constructor","props","animate","bind","updateDimensions","componentDidMount","width","mount","clientWidth","height","clientHeight","window","addEventListener","scene","Scene","camera","PerspectiveCamera","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","antialias","alpha","setClearColor","setSize","aspect","updateProjectionMatrix","render","appendChild","domElement","particleMat","PointsMaterial","color","size","map","TextureLoader","load","transparent","blending","AdditiveBlending","depthWrite","particleGeo","SphereGeometry","vertices","forEach","vertex","x","Math","random","y","particleSystem","Points","name","add","lights","PointLight","set","componentWillUnmount","removeEventListener","removeChild","requestAnimationFrame","getObjectByName","rotation"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\n\nclass Starfield extends Component {\n\n  constructor(props) {\n    super(props);\n    this.animate = this.animate.bind(this);\n    this.updateDimensions = this.updateDimensions.bind(this);\n  }\n\n  componentDidMount() {\n        const width = this.mount.clientWidth;\n        const height = this.mount.clientHeight;\n\n        window.addEventListener(\"resize\", this.updateDimensions);\n\n        // scene\n        this.scene = new THREE.Scene();\n\n        // camera\n        this.camera = new THREE.PerspectiveCamera(\n            75,\n            window.innerWidth / window.innerHeight,\n            0.1,\n            50\n        );\n        this.camera.position.z = 30;\n\n        // rendering\n        this.renderer = new THREE.WebGLRenderer({\n            antialias: true,\n            alpha: true\n        });\n        this.renderer.setClearColor(0x000000, 0);\n        this.renderer.setSize(width, height, false);\n        this.camera.aspect = width / height;\n        this.camera.updateProjectionMatrix();\n\n        this.renderer.render(this.scene, this.camera);\n        this.mount.appendChild(this.renderer.domElement);\n\n        // sphere\n        const particleMat = new THREE.PointsMaterial({\n            color: 0xaecdd0,\n            size: 0.1,\n            map: new THREE.TextureLoader().load(\"/particle.jpg\"),\n            transparent: true,\n            blending: THREE.AdditiveBlending,\n            depthWrite: false\n        });\n\n        const particleGeo = new THREE.SphereGeometry(15, 300, 300);\n\n        particleGeo.vertices.forEach(function(vertex) {\n            vertex.x += Math.random() - 0.2;\n            vertex.y += Math.random() - 0.2;\n            vertex.z += Math.random() - 0.2;\n        });\n\n        const particleSystem = new THREE.Points(particleGeo, particleMat);\n        particleSystem.name = \"particleSystem\";\n\n        this.scene.add(particleSystem);\n\n        var lights = [];\n        lights[0] = new THREE.PointLight(0xffffff, 1, 0);\n        lights[1] = new THREE.PointLight(0xffffff, 1, 0);\n        lights[2] = new THREE.PointLight(0xffffff, 1, 0);\n\n        lights[0].position.set(0, 200, 0);\n        lights[1].position.set(100, 200, 100);\n        lights[2].position.set(-100, -200, -100);\n\n        this.scene.add(lights[0]);\n        this.scene.add(lights[1]);\n        this.scene.add(lights[2]);\n\n        this.renderer.render(this.scene, this.camera);\n\n        this.animate();\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updateDimensions);\n        this.mount.removeChild(this.renderer.domElement);\n    }\n\n    animate() {\n        requestAnimationFrame(this.animate);\n        const particleSystem = this.scene.getObjectByName(\"particleSystem\");\n        particleSystem.rotation.y += 0.005;\n        this.renderer.render(this.scene, this.camera);\n    }\n\n    updateDimensions() {\n        if (this.mount !== null) {\n            this.renderer.setSize(\n                this.mount.clientWidth,\n                this.mount.clientHeight\n            );\n            this.camera.aspect =\n                this.mount.clientWidth / this.mount.clientHeight;\n            this.camera.updateProjectionMatrix();\n\n            this.renderer.render(this.scene, this.camera);\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <div\n                    id=\"boardCanvas\"\n                    style={{ width: \"900px\", height: \"500px\" }}\n                    ref={mount => {\n                        this.mount = mount;\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Starfield;\n"]},"metadata":{},"sourceType":"module"}