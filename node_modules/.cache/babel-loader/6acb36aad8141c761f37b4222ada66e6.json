{"ast":null,"code":"var _jsxFileName = \"/Users/gavinshrader/Sites/gavinshr.com/src/components/Starfield.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Starfield() {\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"starfield\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"starfield\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 8,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n} // https://medium.com/better-programming/fun-with-html-canvas-lets-create-a-star-field-a46b0fed5002\n// Initialize the canvas\n\n_c = Starfield;\nconst canvas = document.getElementById('starField');\nconst c = canvas.getContext('2d'); // Setup variables for the height & width + setup window-resizing\n\nlet w;\nlet h;\n\nconst setCanvasExtents = () => {\n  w = document.body.clientWidth;\n  h = document.body.clientHeight;\n  canvas.width = w;\n  canvas.height = h;\n};\n\nsetCanvasExtents();\n\nwindow.onresize = () => {\n  setCanvasExtents();\n}; // Create an array of stars\n\n\nconst makeStars = count => {\n  const out = [];\n\n  for (let i = 0; i < count; i++) {\n    const s = {\n      x: Math.random() * 1600 - 800,\n\n      /* Generate # between -800 to 800 */\n      y: Math.random() * 900 - 450,\n\n      /* Generate # between -450 to 450 */\n      z: Math.random() * 1000\n      /* Generate # between 0 to 1000 */\n\n    };\n    out.push(s);\n  }\n\n  return out;\n};\n\nlet stars = makeStars(5000); // Clear the background\n\nconst clear = () => {\n  c.fillStyle = \"black\";\n  c.fillRect(0, 0, canvas.width, canvas.height);\n}; // Draw an individual star\n\n\nconst putPixel = (x, y, brightness) => {\n  const intensity = brightness * 255;\n  const rgb = \"rgb(\" + intensity + \",\" + intensity + \",\" + intensity + \")\";\n  c.fillStyle = rgb;\n  c.fillRect(x, y, 1.75, 1.75);\n}; // Move the stars\n\n\nconst moveStars = distance => {\n  const count = stars.length;\n\n  for (var i = 0; i < count; i++) {\n    const s = stars[i];\n    s.z -= distance;\n\n    while (s.z <= 1) {\n      s.z += 1000;\n    }\n  }\n};\n/* Timing functions - make the starfield run */\n// Initiate timing\n\n\nlet prevTime;\n\nconst init = time => {\n  prevTime = time;\n  requestAnimationFrame(tick);\n};\n\nrequestAnimationFrame(init); // Individual tick function\n\nconst tick = time => {\n  let elapsed = time - prevTime;\n  prevTime = time;\n  moveStars(elapsed * 0.075);\n  clear();\n  const cx = w / 2;\n  const cy = h / 2;\n  const count = stars.length;\n  /* Draw each star */\n\n  for (var i = 0; i < count; i++) {\n    const star = stars[i];\n    const x = cx + star.x / (star.z * 0.001);\n    const y = cy + star.y / (star.z * 0.001);\n\n    if (x < 0 || x >= w || y < 0 || y >= h) {\n      continue;\n    }\n\n    const d = star.z / 2500.0;\n    const b = 1 - d * d;\n    putPixel(x, y, b);\n  }\n\n  requestAnimationFrame(tick);\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Starfield\");","map":{"version":3,"sources":["/Users/gavinshrader/Sites/gavinshr.com/src/components/Starfield.js"],"names":["React","Starfield","canvas","document","getElementById","c","getContext","w","h","setCanvasExtents","body","clientWidth","clientHeight","width","height","window","onresize","makeStars","count","out","i","s","x","Math","random","y","z","push","stars","clear","fillStyle","fillRect","putPixel","brightness","intensity","rgb","moveStars","distance","length","prevTime","init","time","requestAnimationFrame","tick","elapsed","cx","cy","star","d","b"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nexport default function Starfield() {\n  return (\n    <section id=\"starfield\">\n      <div className=\"container\">\n        <div className=\"container\">\n          <div class=\"starfield\"/>\n        </div>\n      </div>\n    </section>\n  );\n}\n\n// https://medium.com/better-programming/fun-with-html-canvas-lets-create-a-star-field-a46b0fed5002\n\n// Initialize the canvas\nconst canvas = document.getElementById('starField');\nconst c = canvas.getContext('2d');\n\n// Setup variables for the height & width + setup window-resizing\nlet w;\nlet h;\n\nconst setCanvasExtents = () => {\n  w = document.body.clientWidth;\n  h = document.body.clientHeight;\n  canvas.width = w;\n  canvas.height = h;\n};\n\nsetCanvasExtents();\n\nwindow.onresize = () => {\n  setCanvasExtents();\n};\n\n// Create an array of stars\nconst makeStars = (count) => {\n  const out = [];\n  for (let i = 0; i < count; i++) {\n    const s = {\n      x: Math.random() * 1600 - 800, /* Generate # between -800 to 800 */\n      y: Math.random() * 900 - 450,  /* Generate # between -450 to 450 */\n      z: Math.random() * 1000        /* Generate # between 0 to 1000 */\n    };\n    out.push(s);\n  }\n  return out;\n}\n\nlet stars = makeStars(5000);\n\n// Clear the background\nconst clear = () => {\n  c.fillStyle = \"black\";\n  c.fillRect(0, 0, canvas.width, canvas.height);\n};\n\n// Draw an individual star\nconst putPixel = (x, y, brightness) => {\n  const intensity = brightness * 255;\n  const rgb = \"rgb(\" + intensity + \",\" + intensity + \",\" + intensity + \")\";\n  c.fillStyle = rgb;\n  c.fillRect(x, y, 1.75, 1.75);\n};\n\n// Move the stars\nconst moveStars = (distance) => {\n  const count = stars.length;\n  for (var i = 0; i < count; i++) {\n    const s = stars[i];\n    s.z -= distance;\n    while (s.z <= 1){\n      s.z += 1000;\n    }\n  }\n}\n\n/* Timing functions - make the starfield run */\n\n// Initiate timing\nlet prevTime;\nconst init = time => {\n  prevTime = time;\n  requestAnimationFrame(tick);\n};\n\nrequestAnimationFrame(init);\n\n// Individual tick function\nconst tick = time => {\n  let elapsed = time - prevTime;\n  prevTime = time;\n\n  moveStars(elapsed*0.075);\n\n  clear();\n\n  const cx = w/2;\n  const cy = h/2;\n\n  const count = stars.length;\n\n  /* Draw each star */\n  for (var i = 0; i < count; i++) {\n    const star = stars[i];\n\n    const x = cx + star.x/(star.z * 0.001);\n    const y = cy + star.y/(star.z * 0.001);\n\n    if (x < 0 || x >= w || y < 0 || y >= h){\n      continue;\n    }\n\n    const d = (star.z/2500.0)\n    const b = 1-d*d\n\n    putPixel(x, y, b);\n  }\n\n  requestAnimationFrame(tick);\n};\n"]},"metadata":{},"sourceType":"module"}