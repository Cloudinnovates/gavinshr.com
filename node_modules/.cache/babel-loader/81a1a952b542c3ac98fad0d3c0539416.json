{"ast":null,"code":"var _jsxFileName = \"/Users/gavinshrader/Sites/WebsiteBackbone/src/Starfield/StarfieldAnimation.js\";\n\n/*\n * Source: https://github.com/transitive-bullshit/react-starfield-animation\n * This library wasn't working with the current version of React I'm using so I'm copying the code manually in order to get it working properly.\n *\n * Number of stars to use = numParticles: number,\n * Particle size = lineWidth: number,\n * Particle opacity = alphaFactor: number,\n * Particle depth = depth: number,\n * Screen size = size: ({ width: number, height: number }).isRequired\n * Custom styling input for component = style: object\n */\nimport React, { PureComponent } from 'react';\nimport raf from 'raf'; // requestAnimationFrame - replace with default React library\n\nimport Particle from './particle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StarfieldAnimation extends PureComponent {\n  constructor() {\n    super(...arguments);\n\n    this._canvasRef = ref => {\n      this._canvas = ref;\n    };\n\n    this._tick = () => {\n      this._update();\n\n      this._draw();\n\n      this._tickRaf = raf(this._tick);\n    };\n  }\n\n  componentWillMount() {\n    this._reset(this.props);\n  }\n\n  componentDidMount() {\n    this._tick();\n  }\n\n  componentWillUnmount() {\n    raf.cancel(this._tickRaf);\n  }\n\n  componentWillReceiveProps(props) {\n    this._reset(props);\n  }\n\n  render() {\n    const {\n      numParticles,\n      lineWidth,\n      alphaFactor,\n      depth,\n      size,\n      style,\n      ...rest\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        overflow: 'hidden',\n        ...style\n      },\n      ...rest,\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: this._canvasRef,\n        width: size.width,\n        height: size.height\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  }\n\n  _update() {\n    for (let i = 0; i < this._particles.length; ++i) {\n      this._particles[i].update();\n    }\n  }\n\n  _draw() {\n    if (!this._canvas) return;\n\n    const ctx = this._canvas.getContext('2d');\n\n    const {\n      alphaFactor,\n      lineWidth\n    } = this.props;\n    ctx.save();\n    ctx.translate(this._vp.x, this._vp.y);\n    ctx.clearRect(-this._vp.x, -this._vp.y, this._bounds.width, this._bounds.height);\n    ctx.lineWidth = lineWidth;\n\n    for (let i = 0; i < this._particles.length; ++i) {\n      const p = this._particles[i];\n      p.s = this._bounds.depth / (this._bounds.depth + p.z);\n      p.sx = p.x * p.s;\n      p.sy = p.y * p.s;\n      p.alpha = alphaFactor * (this._bounds.z.max - p.z) / (this._bounds.z.max / 2);\n      ctx.beginPath();\n      ctx.moveTo(p.sx, p.sy);\n      ctx.lineTo(p.osx, p.osy);\n      ctx.strokeStyle = 'hsla(' + p.hue + ', 100%, ' + p.lightness + '%, ' + p.alpha + ')';\n      ctx.stroke();\n    }\n\n    ctx.restore();\n  }\n\n  _reset(props) {\n    const {\n      numParticles,\n      depth,\n      size\n    } = props;\n    this._particles = [];\n    const vp = {\n      x: size.width / 2,\n      y: size.height / 2\n    };\n    this._vp = vp;\n    this._bounds = {\n      depth,\n      width: size.width,\n      height: size.height,\n      x: {\n        min: -vp.x,\n        max: size.width - vp.x\n      },\n      y: {\n        min: -vp.y,\n        max: size.height - vp.y\n      },\n      z: {\n        min: -depth,\n        max: 1000\n      }\n    };\n\n    for (let i = 0; i < numParticles; ++i) {\n      this._particles.push(new Particle(this._bounds));\n    }\n  }\n\n}\n\nStarfieldAnimation.defaultProps = {\n  numParticles: 300,\n  alphaFactor: 1,\n  lineWidth: 2,\n  depth: 300,\n  size: {\n    width: 500,\n    height: 500\n  },\n  style: {}\n};\nexport default StarfieldAnimation;","map":{"version":3,"sources":["/Users/gavinshrader/Sites/WebsiteBackbone/src/Starfield/StarfieldAnimation.js"],"names":["React","PureComponent","raf","Particle","StarfieldAnimation","_canvasRef","ref","_canvas","_tick","_update","_draw","_tickRaf","componentWillMount","_reset","props","componentDidMount","componentWillUnmount","cancel","componentWillReceiveProps","render","numParticles","lineWidth","alphaFactor","depth","size","style","rest","overflow","width","height","i","_particles","length","update","ctx","getContext","save","translate","_vp","x","y","clearRect","_bounds","p","s","z","sx","sy","alpha","max","beginPath","moveTo","lineTo","osx","osy","strokeStyle","hue","lightness","stroke","restore","vp","min","push","defaultProps"],"mappings":"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","sourcesContent":["/*\n * Source: https://github.com/transitive-bullshit/react-starfield-animation\n * This library wasn't working with the current version of React I'm using so I'm copying the code manually in order to get it working properly.\n *\n * Number of stars to use = numParticles: number,\n * Particle size = lineWidth: number,\n * Particle opacity = alphaFactor: number,\n * Particle depth = depth: number,\n * Screen size = size: ({ width: number, height: number }).isRequired\n * Custom styling input for component = style: object\n */\n\nimport React, { PureComponent } from 'react'\nimport raf from 'raf' // requestAnimationFrame - replace with default React library\nimport Particle from './particle'\n\nclass StarfieldAnimation extends PureComponent {\n  static defaultProps = {\n    numParticles: 300,\n    alphaFactor: 1,\n    lineWidth: 2,\n    depth: 300,\n    size: ({width: 500, height: 500}),\n    style: { }\n  }\n\n  componentWillMount() {\n    this._reset(this.props)\n  }\n\n  componentDidMount() {\n    this._tick()\n  }\n\n  componentWillUnmount() {\n    raf.cancel(this._tickRaf)\n  }\n\n  componentWillReceiveProps(props) {\n    this._reset(props)\n  }\n\n  render() {\n    const {\n      numParticles,\n      lineWidth,\n      alphaFactor,\n      depth,\n      size,\n      style,\n      ...rest\n    } = this.props\n\n    return (\n      <div\n        style={{\n          overflow: 'hidden',\n          ...style\n        }}\n        {...rest}\n      >\n        <canvas\n          ref={this._canvasRef}\n          width={size.width}\n          height={size.height}\n        />\n      </div>\n    )\n  }\n\n  _canvasRef = (ref) => {\n    this._canvas = ref\n  }\n\n  _tick = () => {\n    this._update()\n    this._draw()\n\n    this._tickRaf = raf(this._tick)\n  }\n\n  _update() {\n    for (let i = 0; i < this._particles.length; ++i) {\n      this._particles[i].update()\n    }\n  }\n\n  _draw() {\n    if (!this._canvas) return\n    const ctx = this._canvas.getContext('2d')\n    const {\n      alphaFactor,\n      lineWidth\n    } = this.props\n\n    ctx.save()\n    ctx.translate(this._vp.x, this._vp.y)\n    ctx.clearRect(-this._vp.x, -this._vp.y, this._bounds.width, this._bounds.height)\n    ctx.lineWidth = lineWidth\n\n    for (let i = 0; i < this._particles.length; ++i) {\n      const p = this._particles[i]\n\n      p.s = this._bounds.depth / (this._bounds.depth + p.z)\n      p.sx = p.x * p.s\n      p.sy = p.y * p.s\n      p.alpha = alphaFactor * (this._bounds.z.max - p.z) / (this._bounds.z.max / 2)\n\n      ctx.beginPath()\n      ctx.moveTo(p.sx, p.sy)\n      ctx.lineTo(p.osx, p.osy)\n      ctx.strokeStyle = 'hsla(' + p.hue + ', 100%, ' + p.lightness + '%, ' + p.alpha + ')'\n      ctx.stroke()\n    }\n\n    ctx.restore()\n  }\n\n  _reset(props) {\n    const {\n      numParticles,\n      depth,\n      size\n    } = props\n\n    this._particles = []\n\n    const vp = {\n      x: size.width / 2,\n      y: size.height / 2\n    }\n\n    this._vp = vp\n    this._bounds = {\n      depth,\n      width: size.width,\n      height: size.height,\n      x: { min: -vp.x, max: size.width - vp.x },\n      y: { min: -vp.y, max: size.height - vp.y },\n      z: { min: -depth, max: 1000 }\n    }\n\n    for (let i = 0; i < numParticles; ++i) {\n      this._particles.push(new Particle(this._bounds))\n    }\n  }\n}\n\nexport default StarfieldAnimation;\n"]},"metadata":{},"sourceType":"module"}