{"ast":null,"code":"import _classCallCheck from\"/Users/gavinshrader/Sites/gavinshr.com/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/gavinshrader/Sites/gavinshr.com/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _assertThisInitialized from\"/Users/gavinshrader/Sites/gavinshr.com/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";import _inherits from\"/Users/gavinshrader/Sites/gavinshr.com/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/gavinshrader/Sites/gavinshr.com/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import React,{Component}from\"react\";import ReactDOM from\"react-dom\";import*as THREE from\"three\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Starfield=/*#__PURE__*/function(_Component){_inherits(Starfield,_Component);var _super=_createSuper(Starfield);function Starfield(props){var _this;_classCallCheck(this,Starfield);_this=_super.call(this,props);_this.animate=_this.animate.bind(_assertThisInitialized(_this));_this.updateDimensions=_this.updateDimensions.bind(_assertThisInitialized(_this));_this.stars=[];return _this;}_createClass(Starfield,[{key:\"componentDidMount\",value:function componentDidMount(){// setup window sizing + resizing\nvar width=this.mount.clientWidth;var height=this.mount.clientHeight;window.addEventListener(\"resize\",this.updateDimensions);// scene\nthis.scene=new THREE.Scene();this.scene.background=new THREE.Color(0x111827);// camera\nthis.camera=new THREE.PerspectiveCamera(85,window.innerWidth/window.innerHeight,1,1000);this.camera.position.z=5;// rendering\nthis.renderer=new THREE.WebGLRenderer({antialias:true,alpha:true});this.renderer.setSize(width,height,false);this.camera.aspect=width/height;this.camera.updateProjectionMatrix();this.renderer.render(this.scene,this.camera);this.mount.appendChild(this.renderer.domElement);// The loop will move from z position of -1000 to z position 1000, adding a random particle at each position.\nfor(var z=-1000;z<1000;z+=20){// Make a sphere (exactly the same as before).\nvar geometry=new THREE.SphereGeometry(0.5,32,32);var material=new THREE.MeshBasicMaterial({color:0xffffff});var sphere=new THREE.Mesh(geometry,material);// This time we give the sphere random x and y positions between -500 and 500\nsphere.position.x=Math.random()*1000-500;sphere.position.y=Math.random()*1000-500;// Then set the z position to where it is in the loop (distance of camera)\nsphere.position.z=z;// scale it up a bit\nsphere.scale.x=sphere.scale.y=1.75;//add the sphere to the scene\nthis.scene.add(sphere);//finally push it to the stars array\nthis.stars.push(sphere);}this.animate();}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){window.removeEventListener(\"resize\",this.updateDimensions);this.mount.removeChild(this.renderer.domElement);}},{key:\"animate\",value:function animate(){requestAnimationFrame(this.animate);for(var i=0;i<this.stars.length;i++){console.log(\"found star!\");this.stars[i].position.z+=i/10;if(this.stars[i].position.z>1000)this.stars[i].position.z-=2000;}this.renderer.render(this.scene,this.camera);}},{key:\"updateDimensions\",value:function updateDimensions(){if(this.mount!==null){this.renderer.setSize(this.mount.clientWidth,this.mount.clientHeight);this.camera.aspect=this.mount.clientWidth/this.mount.clientHeight;this.camera.updateProjectionMatrix();this.renderer.render(this.scene,this.camera);}}},{key:\"render\",value:function render(){var _this2=this;return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"starfield\",ref:function ref(mount){_this2.mount=mount;}}),/*#__PURE__*/_jsx(\"div\",{className:\"alphaDimmer\"})]});}}]);return Starfield;}(Component);export default Starfield;","map":{"version":3,"sources":["/Users/gavinshrader/Sites/gavinshr.com/src/components/Starfield/Starfield.js"],"names":["React","Component","ReactDOM","THREE","Starfield","props","animate","bind","updateDimensions","stars","width","mount","clientWidth","height","clientHeight","window","addEventListener","scene","Scene","background","Color","camera","PerspectiveCamera","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","antialias","alpha","setSize","aspect","updateProjectionMatrix","render","appendChild","domElement","geometry","SphereGeometry","material","MeshBasicMaterial","color","sphere","Mesh","x","Math","random","y","scale","add","push","removeEventListener","removeChild","requestAnimationFrame","i","length","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\n\nclass Starfield extends Component {\n\n  constructor(props) {\n    super(props);\n    this.animate = this.animate.bind(this);\n    this.updateDimensions = this.updateDimensions.bind(this);\n    this.stars = [];\n  }\n\n  componentDidMount() {\n        // setup window sizing + resizing\n        const width = this.mount.clientWidth;\n        const height = this.mount.clientHeight;\n        window.addEventListener(\"resize\", this.updateDimensions);\n\n        // scene\n        this.scene = new THREE.Scene();\n        this.scene.background = new THREE.Color( 0x111827 );\n\n        // camera\n        this.camera = new THREE.PerspectiveCamera(\n            85,\n            window.innerWidth / window.innerHeight,\n            1,\n            1000\n        );\n        this.camera.position.z = 5;\n\n        // rendering\n        this.renderer = new THREE.WebGLRenderer({\n            antialias: true,\n            alpha: true\n        });\n        this.renderer.setSize(width, height, false);\n        this.camera.aspect = width / height;\n        this.camera.updateProjectionMatrix();\n\n        this.renderer.render(this.scene, this.camera);\n        this.mount.appendChild(this.renderer.domElement);\n\n        // The loop will move from z position of -1000 to z position 1000, adding a random particle at each position.\n        for ( var z= -1000; z < 1000; z+=20 ) {\n\n          // Make a sphere (exactly the same as before).\n          var geometry   = new THREE.SphereGeometry(0.5, 32, 32)\n          var material = new THREE.MeshBasicMaterial( {color: 0xffffff} );\n          var sphere = new THREE.Mesh(geometry, material)\n\n          // This time we give the sphere random x and y positions between -500 and 500\n          sphere.position.x = Math.random() * 1000 - 500;\n          sphere.position.y = Math.random() * 1000 - 500;\n\n          // Then set the z position to where it is in the loop (distance of camera)\n          sphere.position.z = z;\n\n          // scale it up a bit\n          sphere.scale.x = sphere.scale.y = 1.75;\n\n          //add the sphere to the scene\n          this.scene.add( sphere );\n\n          //finally push it to the stars array\n          this.stars.push( sphere );\n        }\n\n        this.animate();\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updateDimensions);\n        this.mount.removeChild(this.renderer.domElement);\n    }\n\n    animate() {\n        requestAnimationFrame(this.animate);\n\n\t\t    for(var i = 0; i < this.stars.length; i++) {\n          console.log(\"found star!\");\n\t\t\t    this.stars[i].position.z +=  i/10;\n\t\t\t    if(this.stars[i].position.z>1000) this.stars[i].position.z-=2000;\n\t\t    }\n\n        this.renderer.render(this.scene, this.camera);\n    }\n\n    updateDimensions() {\n        if (this.mount !== null) {\n            this.renderer.setSize(\n                this.mount.clientWidth,\n                this.mount.clientHeight\n            );\n            this.camera.aspect =\n                this.mount.clientWidth / this.mount.clientHeight;\n            this.camera.updateProjectionMatrix();\n\n            this.renderer.render(this.scene, this.camera);\n        }\n    }\n\n    render() {\n        return (\n            <div>\n              <div className=\"starfield\" ref={mount => {this.mount = mount;}}/>\n              <div className=\"alphaDimmer\"/>\n            </div>\n        );\n    }\n}\n\nexport default Starfield;\n"]},"metadata":{},"sourceType":"module"}