{"ast":null,"code":"var _jsxFileName = \"/Users/gavinshrader/Sites/gavinshr.com/src/components/Starfield/Starfield.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Starfield extends Component {\n  constructor(props) {\n    super(props);\n    this.animate = this.animate.bind(this);\n    this.updateDimensions = this.updateDimensions.bind(this);\n    this.stars = [];\n  }\n\n  componentDidMount() {\n    // setup window sizing + resizing\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n    window.addEventListener(\"resize\", this.updateDimensions); // scene\n\n    this.scene = new THREE.Scene();\n    this.scene.background = new THREE.Color(0x111827); // camera\n\n    this.camera = new THREE.PerspectiveCamera(85, window.innerWidth / window.innerHeight, 1, 1000);\n    this.camera.position.z = 5; // rendering\n\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    this.renderer.setSize(width, height, false);\n    this.camera.aspect = width / height;\n    this.camera.updateProjectionMatrix();\n    this.renderer.render(this.scene, this.camera);\n    this.mount.appendChild(this.renderer.domElement); // Cube geometry\n\n    this.geometry = new THREE.BoxGeometry(2, 2, 2);\n    this.material = new THREE.MeshNormalMaterial();\n    this.mesh = new THREE.Mesh(this.geometry, this.material);\n    this.scene.add(this.mesh); // The loop will move from z position of -1000 to z position 1000, adding a random particle at each position.\n\n    for (var z = -1000; z < 1000; z += 20) {\n      // Make a sphere (exactly the same as before).\n      var geometry = new THREE.SphereGeometry(0.5, 32, 32);\n      var material = new THREE.MeshBasicMaterial({\n        color: 0xffffff\n      });\n      var sphere = new THREE.Mesh(geometry, material); // This time we give the sphere random x and y positions between -500 and 500\n\n      sphere.position.x = Math.random() * 1000 - 500;\n      sphere.position.y = Math.random() * 1000 - 500; // Then set the z position to where it is in the loop (distance of camera)\n\n      sphere.position.z = z; // scale it up a bit\n\n      sphere.scale.x = sphere.scale.y = 1.75; //add the sphere to the scene\n\n      this.scene.add(sphere); //finally push it to the stars array\n\n      this.stars.push(sphere);\n    }\n\n    this.animate();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateDimensions);\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  animate() {\n    requestAnimationFrame(this.animate);\n\n    for (var i = 0; i < this.stars.length; i++) {\n      console.log(\"found star!\");\n      this.stars[i].position.z += i / 10;\n      if (this.stars[i].position.z > 1000) this.stars[i].position.z -= 2000;\n    }\n\n    this.mesh.rotation.z += 0.02;\n    this.mesh.rotation.x += 0.02;\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  updateDimensions() {\n    if (this.mount !== null) {\n      this.renderer.setSize(this.mount.clientWidth, this.mount.clientHeight);\n      this.camera.aspect = this.mount.clientWidth / this.mount.clientHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.render(this.scene, this.camera);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"starfield\",\n        ref: mount => {\n          this.mount = mount;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alphaDimmer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Starfield;","map":{"version":3,"sources":["/Users/gavinshrader/Sites/gavinshr.com/src/components/Starfield/Starfield.js"],"names":["React","Component","ReactDOM","THREE","Starfield","constructor","props","animate","bind","updateDimensions","stars","componentDidMount","width","mount","clientWidth","height","clientHeight","window","addEventListener","scene","Scene","background","Color","camera","PerspectiveCamera","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","antialias","alpha","setSize","aspect","updateProjectionMatrix","render","appendChild","domElement","geometry","BoxGeometry","material","MeshNormalMaterial","mesh","Mesh","add","SphereGeometry","MeshBasicMaterial","color","sphere","x","Math","random","y","scale","push","componentWillUnmount","removeEventListener","removeChild","requestAnimationFrame","i","length","console","log","rotation"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\n\nclass Starfield extends Component {\n\n  constructor(props) {\n    super(props);\n    this.animate = this.animate.bind(this);\n    this.updateDimensions = this.updateDimensions.bind(this);\n    this.stars = [];\n  }\n\n  componentDidMount() {\n        // setup window sizing + resizing\n        const width = this.mount.clientWidth;\n        const height = this.mount.clientHeight;\n        window.addEventListener(\"resize\", this.updateDimensions);\n\n        // scene\n        this.scene = new THREE.Scene();\n        this.scene.background = new THREE.Color( 0x111827 );\n\n        // camera\n        this.camera = new THREE.PerspectiveCamera(\n            85,\n            window.innerWidth / window.innerHeight,\n            1,\n            1000\n        );\n        this.camera.position.z = 5;\n\n        // rendering\n        this.renderer = new THREE.WebGLRenderer({\n            antialias: true,\n            alpha: true\n        });\n        this.renderer.setSize(width, height, false);\n        this.camera.aspect = width / height;\n        this.camera.updateProjectionMatrix();\n\n        this.renderer.render(this.scene, this.camera);\n        this.mount.appendChild(this.renderer.domElement);\n\n        // Cube geometry\n        this.geometry = new THREE.BoxGeometry( 2, 2, 2 );\n      \tthis.material = new THREE.MeshNormalMaterial();\n\n      \tthis.mesh = new THREE.Mesh( this.geometry, this.material );\n      \tthis.scene.add( this.mesh );\n\n        // The loop will move from z position of -1000 to z position 1000, adding a random particle at each position.\n        for ( var z= -1000; z < 1000; z+=20 ) {\n\n          // Make a sphere (exactly the same as before).\n          var geometry   = new THREE.SphereGeometry(0.5, 32, 32)\n          var material = new THREE.MeshBasicMaterial( {color: 0xffffff} );\n          var sphere = new THREE.Mesh(geometry, material)\n\n          // This time we give the sphere random x and y positions between -500 and 500\n          sphere.position.x = Math.random() * 1000 - 500;\n          sphere.position.y = Math.random() * 1000 - 500;\n\n          // Then set the z position to where it is in the loop (distance of camera)\n          sphere.position.z = z;\n\n          // scale it up a bit\n          sphere.scale.x = sphere.scale.y = 1.75;\n\n          //add the sphere to the scene\n          this.scene.add( sphere );\n\n          //finally push it to the stars array\n          this.stars.push( sphere );\n        }\n\n        this.animate();\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updateDimensions);\n        this.mount.removeChild(this.renderer.domElement);\n    }\n\n    animate() {\n        requestAnimationFrame(this.animate);\n\n\t\t    for(var i = 0; i < this.stars.length; i++) {\n          console.log(\"found star!\");\n\t\t\t    this.stars[i].position.z +=  i/10;\n\t\t\t    if(this.stars[i].position.z>1000) this.stars[i].position.z-=2000;\n\t\t    }\n\n        this.mesh.rotation.z += 0.02;\n        this.mesh.rotation.x += 0.02;\n\n        this.renderer.render(this.scene, this.camera);\n    }\n\n    updateDimensions() {\n        if (this.mount !== null) {\n            this.renderer.setSize(\n                this.mount.clientWidth,\n                this.mount.clientHeight\n            );\n            this.camera.aspect =\n                this.mount.clientWidth / this.mount.clientHeight;\n            this.camera.updateProjectionMatrix();\n\n            this.renderer.render(this.scene, this.camera);\n        }\n    }\n\n    render() {\n        return (\n            <div>\n              <div className=\"starfield\" ref={mount => {this.mount = mount;}}/>\n              <div className=\"alphaDimmer\"/>\n            </div>\n        );\n    }\n}\n\nexport default Starfield;\n"]},"metadata":{},"sourceType":"module"}