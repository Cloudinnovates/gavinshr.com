{"ast":null,"code":"var _jsxFileName = \"/Users/gavinshrader/Sites/gavinshr.com/src/components/Starfield/Starfield.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Starfield extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.handleWindowResize = () => {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n    };\n  }\n\n  componentDidMount() {\n    // setup window size resizing\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    window.addEventListener('resize', this.handleWindowResize); // setup camera\n\n    var camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.01, 10);\n    camera.position.z = 1; // setup scene\n\n    var scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x111827); // setup rendering\n\n    var renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    this.mount.appendChild(renderer.domElement); // setup geometries\n\n    var geometry = new THREE.BoxGeometry(0.4, 0.4, 0.4);\n    var material = new THREE.MeshNormalMaterial();\n    var mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh);\n\n    var animate = function (time) {\n      requestAnimationFrame(animate);\n      mesh.rotation.x = time / 2000;\n      mesh.rotation.y = time / 1000;\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.render(scene, camera);\n    };\n\n    animate();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"starfield\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: ref => this.mount = ref\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Starfield;","map":{"version":3,"sources":["/Users/gavinshrader/Sites/gavinshr.com/src/components/Starfield/Starfield.js"],"names":["React","Component","ReactDOM","THREE","Starfield","handleWindowResize","camera","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","componentDidMount","width","height","addEventListener","PerspectiveCamera","position","z","scene","Scene","background","Color","renderer","WebGLRenderer","antialias","setSize","mount","appendChild","domElement","geometry","BoxGeometry","material","MeshNormalMaterial","mesh","Mesh","add","animate","time","requestAnimationFrame","rotation","x","y","setPixelRatio","devicePixelRatio","render","componentWillUnmount","removeEventListener","removeChild","ref"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\n\nclass Starfield extends Component {\n\n  componentDidMount() {\n    // setup window size resizing\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    window.addEventListener('resize', this.handleWindowResize);\n\n    // setup camera\n    var camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 0.01, 10 );\n    camera.position.z = 1;\n\n    // setup scene\n    var scene = new THREE.Scene();\n    scene.background = new THREE.Color( 0x111827 );\n\n    // setup rendering\n\t  var renderer = new THREE.WebGLRenderer( { antialias: true } );\n\t  renderer.setSize( window.innerWidth, window.innerHeight );\n    this.mount.appendChild( renderer.domElement );\n\n    // setup geometries\n    var geometry = new THREE.BoxGeometry( 0.4, 0.4, 0.4 );\n    var material = new THREE.MeshNormalMaterial();\n    var mesh = new THREE.Mesh( geometry, material );\n    scene.add( mesh );\n\n    var animate = function (time) {\n      requestAnimationFrame( animate );\n\n      mesh.rotation.x = time / 2000;\n\t    mesh.rotation.y = time / 1000;\n\n      renderer.setSize( window.innerWidth, window.innerHeight );\n      renderer.setPixelRatio(window.devicePixelRatio);\n\n\t    renderer.render( scene, camera );\n    }\n    animate();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  handleWindowResize = () => {\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n  };\n\n  render() {\n    return (\n      <div className=\"starfield\">\n        <div ref={ref => (this.mount = ref)} />\n      </div>\n    );\n  }\n}\n\nexport default Starfield;\n"]},"metadata":{},"sourceType":"module"}