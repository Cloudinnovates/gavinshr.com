{"ast":null,"code":"var _jsxFileName = \"/Users/gavinshrader/Sites/gavinshr.com/src/components/Starfield/Starfield.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Starfield extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleWindowResize = () => {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n\n    this.animate = this.animate.bind(this);\n    this.updateDimensions = this.updateDimensions.bind(this);\n  }\n\n  componentDidMount() {\n    // setup window resizing\n    window.addEventListener('resize', this.handleWindowResize); // setup camera\n\n    this.camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.01, 10);\n    this.camera.position.z = 1; // setup scene\n\n    this.scene = new THREE.Scene();\n    this.scene.background = new THREE.Color(0x000);\n    /* 0x111827 */\n    // setup rendering\n\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.mount.appendChild(this.renderer.domElement); // setup geometries\n\n    const geometry = new THREE.BoxGeometry(0.4, 0.4, 0.4);\n    const material = new THREE.MeshNormalMaterial();\n    this.mesh = new THREE.Mesh(geometry, material);\n    this.scene.add(this.mesh);\n    this.mesh.rotation.x = 150;\n    this.mesh.rotation.z = 150;\n    /*\n    var animate = function (time) {\n      requestAnimationFrame( animate );\n       this.mesh.rotation.x = time / 2000;\n     this.mesh.rotation.y = time / 1000;\n       this.renderer.setSize( window.innerWidth, window.innerHeight );\n      this.renderer.setPixelRatio(window.devicePixelRatio);\n      this.renderer.render( this.scene, this.camera );\n    }\n    animate();*/\n\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize, false);\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"starfield\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: ref => this.mount = ref\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Starfield;","map":{"version":3,"sources":["/Users/gavinshrader/Sites/gavinshr.com/src/components/Starfield/Starfield.js"],"names":["React","Component","ReactDOM","THREE","Starfield","constructor","props","handleWindowResize","camera","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","renderer","setSize","animate","bind","updateDimensions","componentDidMount","addEventListener","PerspectiveCamera","position","z","scene","Scene","background","Color","WebGLRenderer","antialias","mount","appendChild","domElement","geometry","BoxGeometry","material","MeshNormalMaterial","mesh","Mesh","add","rotation","x","render","componentWillUnmount","removeEventListener","removeChild","ref"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\n\nclass Starfield extends Component {\n\n  constructor(props) {\n    super(props);\n    this.animate = this.animate.bind(this);\n    this.updateDimensions = this.updateDimensions.bind(this);\n  }\n\n  componentDidMount() {\n    // setup window resizing\n    window.addEventListener('resize', this.handleWindowResize);\n\n    // setup camera\n    this.camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 0.01, 10 );\n    this.camera.position.z = 1;\n\n    // setup scene\n    this.scene = new THREE.Scene();\n    this.scene.background = new THREE.Color( 0x000 ); /* 0x111827 */\n\n    // setup rendering\n\t  this.renderer = new THREE.WebGLRenderer( { antialias: true } );\n\t  this.renderer.setSize( window.innerWidth, window.innerHeight );\n    this.mount.appendChild( this.renderer.domElement );\n\n    // setup geometries\n    const geometry = new THREE.BoxGeometry( 0.4, 0.4, 0.4 );\n    const material = new THREE.MeshNormalMaterial();\n    this.mesh = new THREE.Mesh( geometry, material );\n    this.scene.add( this.mesh );\n\n    this.mesh.rotation.x = 150;\n    this.mesh.rotation.z = 150;\n\n    /*\n    var animate = function (time) {\n      requestAnimationFrame( animate );\n\n      this.mesh.rotation.x = time / 2000;\n\t    this.mesh.rotation.y = time / 1000;\n\n      this.renderer.setSize( window.innerWidth, window.innerHeight );\n      this.renderer.setPixelRatio(window.devicePixelRatio);\n\n\t    this.renderer.render( this.scene, this.camera );\n    }\n    animate();*/\n\n    this.renderer.render( this.scene, this.camera );\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleWindowResize, false);\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  handleWindowResize = () => {\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n  };\n\n  render() {\n    return (\n      <div className=\"starfield\">\n        <div ref={ref => (this.mount = ref)} />\n      </div>\n    );\n  }\n}\n\nexport default Starfield;\n"]},"metadata":{},"sourceType":"module"}