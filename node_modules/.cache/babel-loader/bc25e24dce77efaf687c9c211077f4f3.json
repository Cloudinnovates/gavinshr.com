{"ast":null,"code":"// Import components (objects that exist within our universe)\nimport { createCamera } from './components/camera.js';\nimport { createLights } from './components/lights.js';\nimport { createMeshGroup } from './components/meshGroup.js';\nimport { createScene } from './components/scene.js'; // Import systems (processes that run on our Components)\n\nimport { createControls } from './systems/controls.js';\nimport { createRenderer } from './systems/renderer.js';\nimport { Resizer } from './systems/Resizer.js';\nimport { Loop } from './systems/Loop.js'; // These variables are module-scoped: we can not access them outside the module\n\nlet camera;\nlet renderer;\nlet scene;\nlet loop;\nlet animationStatus = true;\n\nclass World {\n  // Create an instance of the World app\n  constructor(container) {\n    camera = createCamera();\n    scene = createScene();\n    renderer = createRenderer();\n    loop = new Loop(camera, scene, renderer);\n    container.append(renderer.domElement);\n    const controls = createControls(camera, renderer.domElement);\n    const {\n      ambientLight,\n      mainLight\n    } = createLights();\n    const meshGroup = createMeshGroup();\n    loop.updatables.push(controls, meshGroup);\n    scene.add(ambientLight, mainLight, meshGroup);\n    const resizer = new Resizer(container, camera, renderer);\n  }\n\n  render() {\n    renderer.render(scene, camera);\n  }\n\n  start() {\n    console.warn(\"Start animation\");\n    loop.start();\n  }\n\n  stop() {\n    console.warn(\"Stop animation\");\n    loop.stop();\n  }\n\n  toggleAnimationLoop() {\n    animationStatus = !animationStatus;\n\n    if (animationStatus == true) {\n      this.start();\n    } else {\n      this.stop();\n    }\n  }\n\n}\n\nexport { World };","map":{"version":3,"sources":["/Users/gavinshrader/Sites/gavinshr.com/src/components/Starfield/World/World.js"],"names":["createCamera","createLights","createMeshGroup","createScene","createControls","createRenderer","Resizer","Loop","camera","renderer","scene","loop","animationStatus","World","constructor","container","append","domElement","controls","ambientLight","mainLight","meshGroup","updatables","push","add","resizer","render","start","console","warn","stop","toggleAnimationLoop"],"mappings":"AAAA;AACA,SAASA,YAAT,QAA6B,wBAA7B;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,eAAT,QAAgC,2BAAhC;AACA,SAASC,WAAT,QAA4B,uBAA5B,C,CAEA;;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,SAASC,IAAT,QAAqB,mBAArB,C,CAEA;;AACA,IAAIC,MAAJ;AACA,IAAIC,QAAJ;AACA,IAAIC,KAAJ;AACA,IAAIC,IAAJ;AAEA,IAAIC,eAAe,GAAG,IAAtB;;AAEA,MAAMC,KAAN,CAAY;AACV;AACAC,EAAAA,WAAW,CAACC,SAAD,EAAY;AACrBP,IAAAA,MAAM,GAAGR,YAAY,EAArB;AACAU,IAAAA,KAAK,GAAGP,WAAW,EAAnB;AACAM,IAAAA,QAAQ,GAAGJ,cAAc,EAAzB;AACAM,IAAAA,IAAI,GAAG,IAAIJ,IAAJ,CAASC,MAAT,EAAiBE,KAAjB,EAAwBD,QAAxB,CAAP;AACAM,IAAAA,SAAS,CAACC,MAAV,CAAiBP,QAAQ,CAACQ,UAA1B;AAEA,UAAMC,QAAQ,GAAGd,cAAc,CAACI,MAAD,EAASC,QAAQ,CAACQ,UAAlB,CAA/B;AACA,UAAM;AAAEE,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,QAA8BnB,YAAY,EAAhD;AACA,UAAMoB,SAAS,GAAGnB,eAAe,EAAjC;AAEAS,IAAAA,IAAI,CAACW,UAAL,CAAgBC,IAAhB,CAAqBL,QAArB,EAA+BG,SAA/B;AACAX,IAAAA,KAAK,CAACc,GAAN,CAAUL,YAAV,EAAwBC,SAAxB,EAAmCC,SAAnC;AAEA,UAAMI,OAAO,GAAG,IAAInB,OAAJ,CAAYS,SAAZ,EAAuBP,MAAvB,EAA+BC,QAA/B,CAAhB;AACD;;AAEDiB,EAAAA,MAAM,GAAG;AACPjB,IAAAA,QAAQ,CAACiB,MAAT,CAAgBhB,KAAhB,EAAuBF,MAAvB;AACD;;AAEDmB,EAAAA,KAAK,GAAG;AACNC,IAAAA,OAAO,CAACC,IAAR,CAAa,iBAAb;AACAlB,IAAAA,IAAI,CAACgB,KAAL;AACD;;AAEDG,EAAAA,IAAI,GAAG;AACLF,IAAAA,OAAO,CAACC,IAAR,CAAa,gBAAb;AACAlB,IAAAA,IAAI,CAACmB,IAAL;AACD;;AAEDC,EAAAA,mBAAmB,GAAG;AACpBnB,IAAAA,eAAe,GAAG,CAACA,eAAnB;;AAEA,QAAIA,eAAe,IAAI,IAAvB,EAA6B;AAC3B,WAAKe,KAAL;AACD,KAFD,MAEO;AACL,WAAKG,IAAL;AACD;AACF;;AAzCS;;AA4CZ,SAASjB,KAAT","sourcesContent":["// Import components (objects that exist within our universe)\nimport { createCamera } from './components/camera.js';\nimport { createLights } from './components/lights.js';\nimport { createMeshGroup } from './components/meshGroup.js';\nimport { createScene } from './components/scene.js';\n\n// Import systems (processes that run on our Components)\nimport { createControls } from './systems/controls.js';\nimport { createRenderer } from './systems/renderer.js';\nimport { Resizer } from './systems/Resizer.js';\nimport { Loop } from './systems/Loop.js';\n\n// These variables are module-scoped: we can not access them outside the module\nlet camera;\nlet renderer;\nlet scene;\nlet loop;\n\nlet animationStatus = true;\n\nclass World {\n  // Create an instance of the World app\n  constructor(container) {\n    camera = createCamera();\n    scene = createScene();\n    renderer = createRenderer();\n    loop = new Loop(camera, scene, renderer);\n    container.append(renderer.domElement);\n\n    const controls = createControls(camera, renderer.domElement);\n    const { ambientLight, mainLight } = createLights();\n    const meshGroup = createMeshGroup();\n\n    loop.updatables.push(controls, meshGroup);\n    scene.add(ambientLight, mainLight, meshGroup);\n\n    const resizer = new Resizer(container, camera, renderer);\n  }\n\n  render() {\n    renderer.render(scene, camera);\n  }\n\n  start() {\n    console.warn(\"Start animation\");\n    loop.start();\n  }\n\n  stop() {\n    console.warn(\"Stop animation\");\n    loop.stop();\n  }\n\n  toggleAnimationLoop() {\n    animationStatus = !animationStatus;\n\n    if (animationStatus == true) {\n      this.start();\n    } else {\n      this.stop();\n    }\n  }\n}\n\nexport { World };\n"]},"metadata":{},"sourceType":"module"}