{"ast":null,"code":"import { Clock } from '../../../vendor/three/build/three.module.js';\nconst clock = new Clock();\n\nclass Loop {\n  constructor(camera, scene, renderer) {\n    this.camera = camera;\n    this.scene = scene;\n    this.renderer = renderer;\n    this.updatables = [];\n  }\n\n  start() {\n    this.renderer.setAnimationLoop(() => {\n      // tell every animated object to tick forward one frame\n      this.tick(); // render a frame\n\n      this.renderer.render(this.scene, this.camera);\n    });\n  }\n\n  stop() {\n    this.renderer.setAnimationLoop(null);\n  }\n\n  tick() {\n    /* Runs 60 times per second - keep this simple/minimal */\n    // Retrieve delta to ensure each frame is rendered smoothly\n    // only call the getDelta function once per frame!\n    let delta = clock.getDelta(); // Frame rates are never perfectly steady, delta/frame-rate log:\n    //console.log(`The last frame rendered in ${delta * 1000} milliseconds`);\n    // If we start/stop the animation, the delta becomes massive\n    // and then the animation moves rapidly upon re-start...\n    // if we encounter a massive delta, we should set it to 0 to ensure\n    // no massive animation steps occurs\n\n    if (delta > 0.1) {\n      delta = 0;\n    } // Loop over animated objects and call their .tick method\n    // update each animatable object by 1 frame\n\n\n    for (const object of this.updatables) {\n      object.tick(delta);\n    }\n  }\n\n}\n\nexport { Loop };","map":{"version":3,"sources":["/Users/gavinshrader/Sites/gavinshr.com/src/components/Starfield/World/systems/Loop.js"],"names":["Clock","clock","Loop","constructor","camera","scene","renderer","updatables","start","setAnimationLoop","tick","render","stop","delta","getDelta","object"],"mappings":"AAAA,SAASA,KAAT,QAAsB,6CAAtB;AAEA,MAAMC,KAAK,GAAG,IAAID,KAAJ,EAAd;;AAEA,MAAME,IAAN,CAAW;AACTC,EAAAA,WAAW,CAACC,MAAD,EAASC,KAAT,EAAgBC,QAAhB,EAA0B;AACnC,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACD;;AAEDC,EAAAA,KAAK,GAAG;AACN,SAAKF,QAAL,CAAcG,gBAAd,CAA+B,MAAM;AACnC;AACA,WAAKC,IAAL,GAFmC,CAInC;;AACA,WAAKJ,QAAL,CAAcK,MAAd,CAAqB,KAAKN,KAA1B,EAAiC,KAAKD,MAAtC;AACD,KAND;AAOD;;AAEDQ,EAAAA,IAAI,GAAG;AACL,SAAKN,QAAL,CAAcG,gBAAd,CAA+B,IAA/B;AACD;;AAEDC,EAAAA,IAAI,GAAG;AAAE;AACP;AACA;AACA,QAAIG,KAAK,GAAGZ,KAAK,CAACa,QAAN,EAAZ,CAHK,CAIL;AACA;AAEA;AACA;AACA;AACA;;AACA,QAAID,KAAK,GAAG,GAAZ,EAAiB;AACfA,MAAAA,KAAK,GAAG,CAAR;AACD,KAbI,CAeL;AACA;;;AACA,SAAK,MAAME,MAAX,IAAqB,KAAKR,UAA1B,EAAsC;AACpCQ,MAAAA,MAAM,CAACL,IAAP,CAAYG,KAAZ;AACD;AACF;;AA1CQ;;AA6CX,SAASX,IAAT","sourcesContent":["import { Clock } from '../../../vendor/three/build/three.module.js';\n\nconst clock = new Clock();\n\nclass Loop {\n  constructor(camera, scene, renderer) {\n    this.camera = camera;\n    this.scene = scene;\n    this.renderer = renderer;\n    this.updatables = [];\n  }\n\n  start() {\n    this.renderer.setAnimationLoop(() => {\n      // tell every animated object to tick forward one frame\n      this.tick();\n\n      // render a frame\n      this.renderer.render(this.scene, this.camera);\n    });\n  }\n\n  stop() {\n    this.renderer.setAnimationLoop(null);\n  }\n\n  tick() { /* Runs 60 times per second - keep this simple/minimal */\n    // Retrieve delta to ensure each frame is rendered smoothly\n    // only call the getDelta function once per frame!\n    let delta = clock.getDelta();\n    // Frame rates are never perfectly steady, delta/frame-rate log:\n    //console.log(`The last frame rendered in ${delta * 1000} milliseconds`);\n\n    // If we start/stop the animation, the delta becomes massive\n    // and then the animation moves rapidly upon re-start...\n    // if we encounter a massive delta, we should set it to 0 to ensure\n    // no massive animation steps occurs\n    if (delta > 0.1) {\n      delta = 0;\n    }\n\n    // Loop over animated objects and call their .tick method\n    // update each animatable object by 1 frame\n    for (const object of this.updatables) {\n      object.tick(delta);\n    }\n  }\n}\n\nexport { Loop }\n"]},"metadata":{},"sourceType":"module"}