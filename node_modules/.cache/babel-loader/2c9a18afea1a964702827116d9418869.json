{"ast":null,"code":"var _jsxFileName = \"/Users/gavinshrader/Sites/gavinshr.com/src/components/Starfield/Starfield.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Starfield extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.updateDimensions = () => {\n      this.setState({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.updateDimensions);\n    var camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.01, 10);\n    camera.position.z = 1;\n    var scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x111827);\n    var geometry = new THREE.BoxGeometry(0.4, 0.4, 0.4);\n    var material = new THREE.MeshNormalMaterial();\n    var mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh);\n    var renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    this.mount.appendChild(renderer.domElement);\n\n    var animate = function (time) {\n      requestAnimationFrame(animate);\n      mesh.rotation.x = time / 2000;\n      mesh.rotation.y = time / 1000;\n      /*camera.aspect = window.clientWidth / window.clientHeight;*/\n\n      /*camera.updateProjectionMatrix();*/\n\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.render(scene, camera);\n    };\n\n    animate();\n  }\n\n  componentWillUnmount() {\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"starfield\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: ref => this.mount = ref\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Starfield;","map":{"version":3,"sources":["/Users/gavinshrader/Sites/gavinshr.com/src/components/Starfield/Starfield.js"],"names":["React","Component","ReactDOM","THREE","Starfield","updateDimensions","setState","width","window","innerWidth","height","innerHeight","componentDidMount","addEventListener","camera","PerspectiveCamera","position","z","scene","Scene","background","Color","geometry","BoxGeometry","material","MeshNormalMaterial","mesh","Mesh","add","renderer","WebGLRenderer","antialias","setSize","mount","appendChild","domElement","animate","time","requestAnimationFrame","rotation","x","y","setPixelRatio","devicePixelRatio","render","componentWillUnmount","removeChild","ref"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;;AAEA,MAAMC,SAAN,SAAwBH,SAAxB,CAAkC;AAAA;AAAA;;AAAA,SAsChCI,gBAtCgC,GAsCb,MAAM;AACvB,WAAKC,QAAL,CAAc;AAAEC,QAAAA,KAAK,EAAEC,MAAM,CAACC,UAAhB;AAA4BC,QAAAA,MAAM,EAAEF,MAAM,CAACG;AAA3C,OAAd;AACD,KAxC+B;AAAA;;AAEhCC,EAAAA,iBAAiB,GAAG;AAClBJ,IAAAA,MAAM,CAACK,gBAAP,CAAwB,QAAxB,EAAkC,KAAKR,gBAAvC;AAEA,QAAIS,MAAM,GAAG,IAAIX,KAAK,CAACY,iBAAV,CAA6B,EAA7B,EAAiCP,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACG,WAA5D,EAAyE,IAAzE,EAA+E,EAA/E,CAAb;AACAG,IAAAA,MAAM,CAACE,QAAP,CAAgBC,CAAhB,GAAoB,CAApB;AAEA,QAAIC,KAAK,GAAG,IAAIf,KAAK,CAACgB,KAAV,EAAZ;AACAD,IAAAA,KAAK,CAACE,UAAN,GAAmB,IAAIjB,KAAK,CAACkB,KAAV,CAAiB,QAAjB,CAAnB;AAEA,QAAIC,QAAQ,GAAG,IAAInB,KAAK,CAACoB,WAAV,CAAuB,GAAvB,EAA4B,GAA5B,EAAiC,GAAjC,CAAf;AACA,QAAIC,QAAQ,GAAG,IAAIrB,KAAK,CAACsB,kBAAV,EAAf;AAEA,QAAIC,IAAI,GAAG,IAAIvB,KAAK,CAACwB,IAAV,CAAgBL,QAAhB,EAA0BE,QAA1B,CAAX;AACAN,IAAAA,KAAK,CAACU,GAAN,CAAWF,IAAX;AAED,QAAIG,QAAQ,GAAG,IAAI1B,KAAK,CAAC2B,aAAV,CAAyB;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAzB,CAAf;AACAF,IAAAA,QAAQ,CAACG,OAAT,CAAkBxB,MAAM,CAACC,UAAzB,EAAqCD,MAAM,CAACG,WAA5C;AACC,SAAKsB,KAAL,CAAWC,WAAX,CAAwBL,QAAQ,CAACM,UAAjC;;AAEA,QAAIC,OAAO,GAAG,UAAUC,IAAV,EAAgB;AAC5BC,MAAAA,qBAAqB,CAAEF,OAAF,CAArB;AAEAV,MAAAA,IAAI,CAACa,QAAL,CAAcC,CAAd,GAAkBH,IAAI,GAAG,IAAzB;AACDX,MAAAA,IAAI,CAACa,QAAL,CAAcE,CAAd,GAAkBJ,IAAI,GAAG,IAAzB;AAEC;;AACA;;AAEAR,MAAAA,QAAQ,CAACG,OAAT,CAAkBxB,MAAM,CAACC,UAAzB,EAAqCD,MAAM,CAACG,WAA5C;AACAkB,MAAAA,QAAQ,CAACa,aAAT,CAAuBlC,MAAM,CAACmC,gBAA9B;AAEDd,MAAAA,QAAQ,CAACe,MAAT,CAAiB1B,KAAjB,EAAwBJ,MAAxB;AACA,KAbD;;AAcAsB,IAAAA,OAAO;AACR;;AAMDS,EAAAA,oBAAoB,GAAG;AACrB,SAAKZ,KAAL,CAAWa,WAAX,CAAuB,KAAKjB,QAAL,CAAcM,UAArC;AACD;;AAEDS,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACE;AAAK,QAAA,GAAG,EAAEG,GAAG,IAAK,KAAKd,KAAL,GAAac;AAA/B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AApD+B;;AAuDlC,eAAe3C,SAAf","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\n\nclass Starfield extends Component {\n\n  componentDidMount() {\n    window.addEventListener('resize', this.updateDimensions);\n\n    var camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 0.01, 10 );\n    camera.position.z = 1;\n\n    var scene = new THREE.Scene();\n    scene.background = new THREE.Color( 0x111827 );\n\n    var geometry = new THREE.BoxGeometry( 0.4, 0.4, 0.4 );\n    var material = new THREE.MeshNormalMaterial();\n\n    var mesh = new THREE.Mesh( geometry, material );\n    scene.add( mesh );\n\n\t  var renderer = new THREE.WebGLRenderer( { antialias: true } );\n\t  renderer.setSize( window.innerWidth, window.innerHeight );\n    this.mount.appendChild( renderer.domElement );\n\n    var animate = function (time) {\n      requestAnimationFrame( animate );\n\n      mesh.rotation.x = time / 2000;\n\t    mesh.rotation.y = time / 1000;\n\n      /*camera.aspect = window.clientWidth / window.clientHeight;*/\n      /*camera.updateProjectionMatrix();*/\n\n      renderer.setSize( window.innerWidth, window.innerHeight );\n      renderer.setPixelRatio(window.devicePixelRatio);\n\n\t    renderer.render( scene, camera );\n    }\n    animate();\n  }\n\n  updateDimensions = () => {\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\n  };\n\n  componentWillUnmount() {\n    this.mount.removeChild(this.renderer.domElement)\n  }\n\n  render() {\n    return (\n      <div className=\"starfield\">\n        <div ref={ref => (this.mount = ref)} />\n      </div>\n    );\n  }\n}\n\nexport default Starfield;\n"]},"metadata":{},"sourceType":"module"}