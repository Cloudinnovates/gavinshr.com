{"ast":null,"code":"var _jsxFileName = \"/Users/gavinshrader/Sites/gavinshr.com/src/components/Starfield/Starfield.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Starfield extends Component {\n  constructor(props) {\n    super(props);\n    this.animate = this.animate.bind(this);\n    this.updateDimensions = this.updateDimensions.bind(this);\n  }\n\n  componentDidMount() {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n    window.addEventListener(\"resize\", this.updateDimensions); // scene\n\n    this.scene = new THREE.Scene();\n    this.scene.background = new THREE.Color(0x111827); // camera\n\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 50);\n    this.camera.position.z = 15;\n    this.camera.position.x = 0;\n    this.camera.position.y = 0; // rendering\n\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    this.renderer.setSize(width, height, false);\n    this.camera.aspect = width / height;\n    this.camera.updateProjectionMatrix();\n    this.renderer.render(this.scene, this.camera);\n    this.mount.appendChild(this.renderer.domElement); // The loop will move from z position of -1000 to z position 1000, adding a random particle at each position.\n\n    this.stars = [];\n\n    for (var z = -1000; z < 1000; z += 20) {\n      // Make a sphere (exactly the same as before).\n      var geometry = new THREE.SphereGeometry(0.5, 32, 32);\n      var material = new THREE.MeshBasicMaterial({\n        color: 0xffffff\n      });\n      var sphere = new THREE.Mesh(geometry, material); // This time we give the sphere random x and y positions between -500 and 500\n\n      sphere.position.x = Math.random() * 1000 - 500;\n      sphere.position.y = Math.random() * 1000 - 500; // Then set the z position to where it is in the loop (distance of camera)\n\n      sphere.position.z = z; // scale it up a bit\n\n      sphere.scale.x = sphere.scale.y = 2; //add the sphere to the scene\n\n      this.scene.add(sphere); //finally push it to the stars array\n\n      this.stars.push(sphere);\n    }\n\n    this.animate();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateDimensions);\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  animate() {\n    requestAnimationFrame(this.animate); // loop through each star\n\n    for (var i = 0; i < this.stars.length; i++) {\n      var star = this.stars[i]; // and move it forward dependent on the mouseY position.\n\n      star.position.z += i / 10; // if the particle is too close move it to the back\n\n      if (star.position.z > 1000) star.position.z -= 2000;\n    }\n\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  updateDimensions() {\n    if (this.mount !== null) {\n      this.renderer.setSize(this.mount.clientWidth, this.mount.clientHeight);\n      this.camera.aspect = this.mount.clientWidth / this.mount.clientHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.render(this.scene, this.camera);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"starfield\",\n        ref: mount => {\n          this.mount = mount;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alphaDimmer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Starfield;","map":{"version":3,"sources":["/Users/gavinshrader/Sites/gavinshr.com/src/components/Starfield/Starfield.js"],"names":["React","Component","ReactDOM","THREE","Starfield","constructor","props","animate","bind","updateDimensions","componentDidMount","width","mount","clientWidth","height","clientHeight","window","addEventListener","scene","Scene","background","Color","camera","PerspectiveCamera","innerWidth","innerHeight","position","z","x","y","renderer","WebGLRenderer","antialias","alpha","setSize","aspect","updateProjectionMatrix","render","appendChild","domElement","stars","geometry","SphereGeometry","material","MeshBasicMaterial","color","sphere","Mesh","Math","random","scale","add","push","componentWillUnmount","removeEventListener","removeChild","requestAnimationFrame","i","length","star"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\n\nclass Starfield extends Component {\n\n  constructor(props) {\n    super(props);\n    this.animate = this.animate.bind(this);\n    this.updateDimensions = this.updateDimensions.bind(this);\n  }\n\n  componentDidMount() {\n        const width = this.mount.clientWidth;\n        const height = this.mount.clientHeight;\n\n        window.addEventListener(\"resize\", this.updateDimensions);\n\n        // scene\n        this.scene = new THREE.Scene();\n        this.scene.background = new THREE.Color( 0x111827 );\n\n        // camera\n        this.camera = new THREE.PerspectiveCamera(\n            75,\n            window.innerWidth / window.innerHeight,\n            0.1,\n            50\n        );\n        this.camera.position.z = 15;\n        this.camera.position.x = 0;\n        this.camera.position.y = 0;\n\n        // rendering\n        this.renderer = new THREE.WebGLRenderer({\n            antialias: true,\n            alpha: true\n        });\n        this.renderer.setSize(width, height, false);\n        this.camera.aspect = width / height;\n        this.camera.updateProjectionMatrix();\n\n        this.renderer.render(this.scene, this.camera);\n        this.mount.appendChild(this.renderer.domElement);\n\n        // The loop will move from z position of -1000 to z position 1000, adding a random particle at each position.\n        this.stars = [];\n        for ( var z= -1000; z < 1000; z+=20 ) {\n\n          // Make a sphere (exactly the same as before).\n          var geometry   = new THREE.SphereGeometry(0.5, 32, 32)\n          var material = new THREE.MeshBasicMaterial( {color: 0xffffff} );\n          var sphere = new THREE.Mesh(geometry, material)\n\n          // This time we give the sphere random x and y positions between -500 and 500\n          sphere.position.x = Math.random() * 1000 - 500;\n          sphere.position.y = Math.random() * 1000 - 500;\n\n          // Then set the z position to where it is in the loop (distance of camera)\n          sphere.position.z = z;\n\n          // scale it up a bit\n          sphere.scale.x = sphere.scale.y = 2;\n\n          //add the sphere to the scene\n          this.scene.add( sphere );\n\n          //finally push it to the stars array\n          this.stars.push(sphere);\n        }\n\n        this.animate();\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updateDimensions);\n        this.mount.removeChild(this.renderer.domElement);\n    }\n\n    animate() {\n        requestAnimationFrame(this.animate);\n\n        // loop through each star\n\t\t    for(var i = 0; i < this.stars.length; i++) {\n          var star = this.stars[i];\n\n          // and move it forward dependent on the mouseY position.\n\t\t\t    star.position.z +=  i/10;\n\n\t\t\t    // if the particle is too close move it to the back\n\t\t\t    if(star.position.z>1000) star.position.z-=2000;\n\t\t    }\n\n        this.renderer.render(this.scene, this.camera);\n    }\n\n    updateDimensions() {\n        if (this.mount !== null) {\n            this.renderer.setSize(\n                this.mount.clientWidth,\n                this.mount.clientHeight\n            );\n            this.camera.aspect =\n                this.mount.clientWidth / this.mount.clientHeight;\n            this.camera.updateProjectionMatrix();\n\n            this.renderer.render(this.scene, this.camera);\n        }\n    }\n\n    render() {\n        return (\n            <div>\n              <div className=\"starfield\" ref={mount => {this.mount = mount;}}/>\n              <div className=\"alphaDimmer\"/>\n            </div>\n        );\n    }\n}\n\nexport default Starfield;\n"]},"metadata":{},"sourceType":"module"}