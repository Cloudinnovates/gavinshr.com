{"ast":null,"code":"var _jsxFileName = \"/Users/gavinshrader/Sites/gavinshr.com/src/components/Starfield/Starfield.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Starfield extends Component {\n  constructor(props) {\n    super(props);\n    this.animate = this.animate.bind(this);\n    this.updateDimensions = this.updateDimensions.bind(this);\n  }\n\n  componentDidMount() {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n    window.addEventListener(\"resize\", this.updateDimensions); // scene\n\n    this.scene = new THREE.Scene(); // camera\n\n    this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 50);\n    this.camera.position.z = 10; // rendering\n\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    this.renderer.setSize(width, height, false);\n    this.camera.aspect = width / height;\n    this.camera.updateProjectionMatrix();\n    this.renderer.render(this.scene, this.camera);\n    this.mount.appendChild(this.renderer.domElement); // setup geo\n\n    const geometry = new THREE.BoxGeometry(5, 5, 5);\n    const material = new THREE.MeshNormalMaterial();\n    const cube = new THREE.Mesh(geometry, material);\n    cube.position.set(0, 0, 0);\n    cube.name = \"cube\";\n    this.scene.add(cube);\n    this.renderer.render(this.scene, this.camera);\n    this.animate();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateDimensions);\n    this.mount.removeChild(this.renderer.domElement);\n  }\n\n  animate() {\n    requestAnimationFrame(this.animate);\n    const cube = this.scene.getObjectByName(\"cube\");\n    cube.rotation.x += 0.005;\n    cube.rotation.y += 0.005;\n    cube.rotation.z += 0.005;\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  updateDimensions() {\n    if (this.mount !== null) {\n      this.renderer.setSize(this.mount.clientWidth, this.mount.clientHeight);\n      this.camera.aspect = this.mount.clientWidth / this.mount.clientHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.render(this.scene, this.camera);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"starfield\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"boardCanvas\",\n        style: {\n          width: \"900px\",\n          height: \"500px\"\n        },\n        ref: mount => {\n          this.mount = mount;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Starfield;","map":{"version":3,"sources":["/Users/gavinshrader/Sites/gavinshr.com/src/components/Starfield/Starfield.js"],"names":["React","Component","ReactDOM","THREE","Starfield","constructor","props","animate","bind","updateDimensions","componentDidMount","width","mount","clientWidth","height","clientHeight","window","addEventListener","scene","Scene","camera","PerspectiveCamera","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","antialias","alpha","setSize","aspect","updateProjectionMatrix","render","appendChild","domElement","geometry","BoxGeometry","material","MeshNormalMaterial","cube","Mesh","set","name","add","componentWillUnmount","removeEventListener","removeChild","requestAnimationFrame","getObjectByName","rotation","x","y"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\n\nclass Starfield extends Component {\n\n  constructor(props) {\n    super(props);\n    this.animate = this.animate.bind(this);\n    this.updateDimensions = this.updateDimensions.bind(this);\n  }\n\n  componentDidMount() {\n        const width = this.mount.clientWidth;\n        const height = this.mount.clientHeight;\n\n        window.addEventListener(\"resize\", this.updateDimensions);\n\n        // scene\n        this.scene = new THREE.Scene();\n\n        // camera\n        this.camera = new THREE.PerspectiveCamera(\n            45,\n            window.innerWidth / window.innerHeight,\n            0.1,\n            50\n        );\n        this.camera.position.z = 10;\n\n        // rendering\n        this.renderer = new THREE.WebGLRenderer({\n            antialias: true,\n            alpha: true\n        });\n        this.renderer.setSize(width, height, false);\n        this.camera.aspect = width / height;\n        this.camera.updateProjectionMatrix();\n\n        this.renderer.render(this.scene, this.camera);\n        this.mount.appendChild(this.renderer.domElement);\n\n        // setup geo\n        const geometry = new THREE.BoxGeometry(5, 5, 5);\n        const material = new THREE.MeshNormalMaterial();\n        const cube = new THREE.Mesh(geometry, material);\n        cube.position.set(0, 0, 0);\n        cube.name = \"cube\"\n        this.scene.add(cube);\n\n        this.renderer.render(this.scene, this.camera);\n\n        this.animate();\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updateDimensions);\n        this.mount.removeChild(this.renderer.domElement);\n    }\n\n    animate() {\n        requestAnimationFrame(this.animate);\n        const cube = this.scene.getObjectByName(\"cube\");\n        cube.rotation.x += 0.005;\n        cube.rotation.y += 0.005;\n        cube.rotation.z += 0.005;\n        this.renderer.render(this.scene, this.camera);\n    }\n\n    updateDimensions() {\n        if (this.mount !== null) {\n            this.renderer.setSize(\n                this.mount.clientWidth,\n                this.mount.clientHeight\n            );\n            this.camera.aspect =\n                this.mount.clientWidth / this.mount.clientHeight;\n            this.camera.updateProjectionMatrix();\n\n            this.renderer.render(this.scene, this.camera);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"starfield\">\n                <div\n                    id=\"boardCanvas\"\n                    style={{ width: \"900px\", height: \"500px\" }}\n                    ref={mount => {\n                        this.mount = mount;\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Starfield;\n"]},"metadata":{},"sourceType":"module"}