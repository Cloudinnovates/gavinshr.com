{"ast":null,"code":"const setSize = (container, camera, renderer) => {\n  // Set the camera's aspect ratio\n  camera.aspect = container.clientWidth / container.clientHeight; // Update the camera's frustum\n\n  camera.updateProjectionMatrix(); // Update the size of the renderer & canvas\n\n  renderer.setSize(container.clientWidth, container.clientHeight); // Set the pixel ratio (for mobile devices)\n\n  renderer.setPixelRatio(window.devicePixelRatio);\n};\n\nclass Resizer {\n  constructor(container, camera, renderer) {\n    // Call the setSize function upon initial load\n    setSize(container, camera, renderer); // Set the size again if a resize event occurs\n\n    window.addEventListener('resize', () => {\n      setSize(container, camera, renderer);\n    });\n  }\n\n}\n\nexport { Resizer };","map":{"version":3,"sources":["/Users/gavinshrader/Sites/gavinshr.com/src/components/Starfield/World/systems/Resizer.js"],"names":["setSize","container","camera","renderer","aspect","clientWidth","clientHeight","updateProjectionMatrix","setPixelRatio","window","devicePixelRatio","Resizer","constructor","addEventListener"],"mappings":"AAAA,MAAMA,OAAO,GAAG,CAACC,SAAD,EAAYC,MAAZ,EAAoBC,QAApB,KAAiC;AAC/C;AACAD,EAAAA,MAAM,CAACE,MAAP,GAAgBH,SAAS,CAACI,WAAV,GAAwBJ,SAAS,CAACK,YAAlD,CAF+C,CAI/C;;AACAJ,EAAAA,MAAM,CAACK,sBAAP,GAL+C,CAO/C;;AACAJ,EAAAA,QAAQ,CAACH,OAAT,CAAiBC,SAAS,CAACI,WAA3B,EAAwCJ,SAAS,CAACK,YAAlD,EAR+C,CAU/C;;AACAH,EAAAA,QAAQ,CAACK,aAAT,CAAuBC,MAAM,CAACC,gBAA9B;AACD,CAZD;;AAcA,MAAMC,OAAN,CAAc;AACZC,EAAAA,WAAW,CAACX,SAAD,EAAYC,MAAZ,EAAoBC,QAApB,EAA8B;AACvC;AACAH,IAAAA,OAAO,CAACC,SAAD,EAAYC,MAAZ,EAAoBC,QAApB,CAAP,CAFuC,CAIvC;;AACAM,IAAAA,MAAM,CAACI,gBAAP,CAAwB,QAAxB,EAAkC,MAAM;AACtCb,MAAAA,OAAO,CAACC,SAAD,EAAYC,MAAZ,EAAoBC,QAApB,CAAP;AACD,KAFD;AAGD;;AATW;;AAYd,SAASQ,OAAT","sourcesContent":["const setSize = (container, camera, renderer) => {\n  // Set the camera's aspect ratio\n  camera.aspect = container.clientWidth / container.clientHeight;\n\n  // Update the camera's frustum\n  camera.updateProjectionMatrix();\n\n  // Update the size of the renderer & canvas\n  renderer.setSize(container.clientWidth, container.clientHeight);\n\n  // Set the pixel ratio (for mobile devices)\n  renderer.setPixelRatio(window.devicePixelRatio);\n};\n\nclass Resizer {\n  constructor(container, camera, renderer) {\n    // Call the setSize function upon initial load\n    setSize(container, camera, renderer);\n\n    // Set the size again if a resize event occurs\n    window.addEventListener('resize', () => {\n      setSize(container, camera, renderer);\n    });\n  }\n}\n\nexport { Resizer };\n"]},"metadata":{},"sourceType":"module"}