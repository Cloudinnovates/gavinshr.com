{"ast":null,"code":"import { SphereBufferGeometry, Group, Mesh, MeshStandardMaterial, MathUtils } from '../../../vendor/three/build/three.module.js';\n\nfunction createMeshGroup() {\n  const group = new Group();\n  let sphere = createSphereGeometry();\n  group.add(sphere);\n\n  for (let i = 0; i < 1; i += 0.05) {\n    const clonedSphere = sphere.clone();\n    clonedSphere.position.x = Math.cos(2 * Math.PI * i);\n    clonedSphere.position.y = Math.sin(2 * Math.PI * i);\n    clonedSphere.scale.multiplyScalar(0.01 + i);\n    group.add(clonedSphere);\n  }\n\n  group.scale.multiplyScalar(2);\n  const radiansPerSecond = MathUtils.degToRad(30);\n\n  group.tick = delta => {\n    group.rotation.z -= delta * radiansPerSecond;\n  };\n\n  return group;\n}\n\nfunction createSphereGeometry() {\n  const geometry = new SphereBufferGeometry(0.25, 16, 16);\n  const material = new MeshStandardMaterial({\n    color: 'indigo'\n  });\n  const protoSphere = new Mesh(geometry, material);\n  return protoSphere;\n}\n\nexport { createMeshGroup };","map":{"version":3,"sources":["/Users/gavinshrader/Sites/gavinshr.com/src/components/Starfield/World/components/meshGroup.js"],"names":["SphereBufferGeometry","Group","Mesh","MeshStandardMaterial","MathUtils","createMeshGroup","group","sphere","createSphereGeometry","add","i","clonedSphere","clone","position","x","Math","cos","PI","y","sin","scale","multiplyScalar","radiansPerSecond","degToRad","tick","delta","rotation","z","geometry","material","color","protoSphere"],"mappings":"AAAA,SACEA,oBADF,EAEEC,KAFF,EAGEC,IAHF,EAIEC,oBAJF,EAKEC,SALF,QAMQ,6CANR;;AAQA,SAASC,eAAT,GAA2B;AACzB,QAAMC,KAAK,GAAG,IAAIL,KAAJ,EAAd;AAEA,MAAIM,MAAM,GAAGC,oBAAoB,EAAjC;AACAF,EAAAA,KAAK,CAACG,GAAN,CAAUF,MAAV;;AAEA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,IAA5B,EAAkC;AAChC,UAAMC,YAAY,GAAGJ,MAAM,CAACK,KAAP,EAArB;AAEAD,IAAAA,YAAY,CAACE,QAAb,CAAsBC,CAAtB,GAA0BC,IAAI,CAACC,GAAL,CAAS,IAAID,IAAI,CAACE,EAAT,GAAcP,CAAvB,CAA1B;AACAC,IAAAA,YAAY,CAACE,QAAb,CAAsBK,CAAtB,GAA0BH,IAAI,CAACI,GAAL,CAAS,IAAIJ,IAAI,CAACE,EAAT,GAAcP,CAAvB,CAA1B;AAEAC,IAAAA,YAAY,CAACS,KAAb,CAAmBC,cAAnB,CAAkC,OAAOX,CAAzC;AAEAJ,IAAAA,KAAK,CAACG,GAAN,CAAUE,YAAV;AACD;;AAEDL,EAAAA,KAAK,CAACc,KAAN,CAAYC,cAAZ,CAA2B,CAA3B;AAEA,QAAMC,gBAAgB,GAAGlB,SAAS,CAACmB,QAAV,CAAmB,EAAnB,CAAzB;;AAEAjB,EAAAA,KAAK,CAACkB,IAAN,GAAcC,KAAD,IAAW;AACtBnB,IAAAA,KAAK,CAACoB,QAAN,CAAeC,CAAf,IAAoBF,KAAK,GAAGH,gBAA5B;AACD,GAFD;;AAIA,SAAOhB,KAAP;AACD;;AAED,SAASE,oBAAT,GAAgC;AAC9B,QAAMoB,QAAQ,GAAG,IAAI5B,oBAAJ,CAAyB,IAAzB,EAA+B,EAA/B,EAAmC,EAAnC,CAAjB;AAEA,QAAM6B,QAAQ,GAAG,IAAI1B,oBAAJ,CAAyB;AAAE2B,IAAAA,KAAK,EAAE;AAAT,GAAzB,CAAjB;AAEA,QAAMC,WAAW,GAAG,IAAI7B,IAAJ,CAAS0B,QAAT,EAAmBC,QAAnB,CAApB;AAEA,SAAOE,WAAP;AACD;;AAED,SAAS1B,eAAT","sourcesContent":["import {\n  SphereBufferGeometry,\n  Group,\n  Mesh,\n  MeshStandardMaterial,\n  MathUtils,\n } from '../../../vendor/three/build/three.module.js';\n\nfunction createMeshGroup() {\n  const group = new Group();\n\n  let sphere = createSphereGeometry();\n  group.add(sphere);\n\n  for (let i = 0; i < 1; i += 0.05) {\n    const clonedSphere = sphere.clone();\n\n    clonedSphere.position.x = Math.cos(2 * Math.PI * i);\n    clonedSphere.position.y = Math.sin(2 * Math.PI * i);\n\n    clonedSphere.scale.multiplyScalar(0.01 + i);\n\n    group.add(clonedSphere);\n  }\n\n  group.scale.multiplyScalar(2);\n\n  const radiansPerSecond = MathUtils.degToRad(30);\n\n  group.tick = (delta) => {\n    group.rotation.z -= delta * radiansPerSecond;\n  }\n\n  return group;\n}\n\nfunction createSphereGeometry() {\n  const geometry = new SphereBufferGeometry(0.25, 16, 16);\n\n  const material = new MeshStandardMaterial({ color: 'indigo',});\n\n  const protoSphere = new Mesh(geometry, material);\n\n  return protoSphere;\n}\n\nexport { createMeshGroup };\n"]},"metadata":{},"sourceType":"module"}