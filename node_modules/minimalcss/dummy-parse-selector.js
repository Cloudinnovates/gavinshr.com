const { PerformanceObserver, performance } = require('perf_hooks');
const cssTree = require('css-tree');

// const cssTree = require("css-tree@1.0.0-alpha.29");

// function getSelectorParents(selector) {
//   const selectorAst = cssTree.parse(selector, { context: 'selector' });

//   // solution #1
//   selectorAst.children.prevUntil(
//     selectorAst.children.tail,
//     (node, item, list) => {
//       list.remove(item);
//       return node.type === 'Combinator' || node.type === 'WhiteSpace';
//     }
//   );

//   // solution #2
//   //     let item;
//   //     while (item = selectorAst.children.pop()) {
//   //         const node = item.data;
//   //         if (node.type === 'Combinator' || node.type === 'WhiteSpace') {
//   //             break;
//   //         }
//   //     }

//   return cssTree.generate(selectorAst);
//   // return selectorAst.children.map(cssTree.generate);
// }

function getSelectorParent1(selector) {
  const selectorAst = cssTree.parse(selector, { context: 'selector' });

  // solution #1
  selectorAst.children.prevUntil(
    selectorAst.children.tail,
    (node, item, list) => {
      list.remove(item);
      return node.type === 'Combinator' || node.type === 'WhiteSpace';
    }
  );

  // solution #2
  // let item;
  // while ((item = selectorAst.children.pop())) {
  //   const node = item.data;
  //   if (node.type === 'Combinator' || node.type === 'WhiteSpace') {
  //     break;
  //   }
  // }

  return cssTree.generate(selectorAst);
}

function getSelectorParent2(selector) {
  const selectorAst = cssTree.parse(selector, { context: 'selector' });

  // solution #2
  let item;
  while ((item = selectorAst.children.pop())) {
    const node = item.data;
    if (node.type === 'Combinator' || node.type === 'WhiteSpace') {
      break;
    }
  }

  return cssTree.generate(selectorAst);
}

function getSelectorParents(selector) {
  const parentSelectors = [];
  const selectorAst = cssTree.parse(selector, { context: 'selector' });

  let generatedCSS;
  while (selectorAst.children.tail) {
    selectorAst.children.prevUntil(
      selectorAst.children.tail,
      (node, item, list) => {
        list.remove(item);
        return node.type === 'Combinator' || node.type === 'WhiteSpace';
      }
    );
    generatedCSS = cssTree.generate(selectorAst);
    if (generatedCSS) {
      parentSelectors.push(generatedCSS);
    }
  }
  return parentSelectors.reverse();
}

const SELECTORS = [
  {
    selector: '.ui.right.pointing.upward.dropdown:not(.top):not(.bottom) .menu'
  },
  {
    selector:
      '.ui.right.pointing.upward.dropdown:not(.top):not(.bottom) .menu:after'
  },
  {
    selector: '.ui.left.pointing.upward.dropdown:not(.top):not(.bottom) .menu'
  },
  {
    selector:
      '.ui.left.pointing.upward.dropdown:not(.top):not(.bottom) .menu:after'
  },
  { selector: '.ui.dropdown>.dropdown.icon:before' },
  { selector: '.ui.dropdown .menu .item .dropdown.icon:before' },
  { selector: '.ui.dropdown .item .left.dropdown.icon:before' },
  { selector: '.ui.dropdown .left.menu .item .dropdown.icon:before' },
  { selector: '.ui.vertical.menu .dropdown.item>.dropdown.icon:before' },
  { selector: '.ui.search' },
  { selector: '.ui.search>.prompt' },
  { selector: '.ui.search .prompt' },
  { selector: '.ui.search .prompt~.search.icon' },
  { selector: '.ui.search>.results' },
  { selector: '.ui.search>.results>:first-child' },
  { selector: '.ui.search>.results>:last-child' },
  { selector: '.ui.search>.results .result' },
  { selector: '.ui.search>.results .result:last-child' },
  { selector: '.ui.search>.results .result .image' },
  { selector: '.ui.search>.results .result .image img' },
  { selector: '.ui.search>.results .result .image+.content' },
  { selector: '.ui.search>.results .result .title' },
  { selector: '.ui.search>.results .result .description' },
  { selector: '.ui.search>.results .result .price' },
  { selector: '.ui.search>.results>.message' },
  { selector: '.ui.search>.results>.message .header' },
  { selector: '.ui.search>.results>.message .description' },
  { selector: '.ui.search>.results>.action' },
  { selector: '.ui.search>.prompt:focus' },
  { selector: '.ui.loading.search .input>i.icon:before' },
  { selector: '.ui.loading.search .input>i.icon:after' },
  { selector: '.ui.search>.results .result:hover' },
  { selector: '.ui.category.search>.results .category .result:hover' },
  { selector: '.ui.search .action:hover' },
  { selector: '.ui.category.search>.results .category.active' },
  { selector: '.ui.category.search>.results .category.active>.name' },
  { selector: '.ui.search>.results .result.active' },
  { selector: '.ui.category.search>.results .category .result.active' },
  { selector: '.ui.search>.results .result.active .title' },
  { selector: '.ui.search>.results .result.active .description' },
  { selector: '.ui.disabled.search' },
  { selector: '.ui.search.selection .prompt' },
  { selector: '.ui.search.selection>.icon.input>.remove.icon' },
  { selector: '.ui.search.selection>.icon.input>.active.remove.icon' },
  {
    selector:
      '.ui.search.selection>.icon.input:not([class*="left icon"])>.icon~.remove.icon'
  },
  { selector: '.ui.search.selection>.icon.input>.remove.icon:hover' },
  { selector: '.ui.category.search .results' },
  { selector: '.ui.category.search .results.animating' },
  { selector: '.ui.category.search .results.visible' },
  { selector: '.ui.category.search>.results .category' },
  { selector: '.ui.category.search>.results .category:last-child' },
  {
    selector: '.ui.category.search>.results .category:first-child .name+.result'
  },
  {
    selector:
      '.ui.category.search>.results .category:last-child .result:last-child'
  },
  { selector: '.ui.category.search>.results .category>.name' },
  { selector: '.ui.category.search>.results .category .results' },
  { selector: '.ui.category.search>.results .category .result' },
  { selector: '.ui[class*="left aligned"].search>.results' },
  { selector: '.ui[class*="right aligned"].search>.results' },
  { selector: '.ui.fluid.search .results' },
  { selector: '.ui.mini.search' },
  { selector: '.ui.small.search' },
  { selector: '.ui.large.search' },
  { selector: '.ui.big.search' },
  { selector: '.ui.huge.search' },
  { selector: '.ui.massive.search' },
  { selector: '.ui.search .results' },
  { selector: '.highlight .hll' },
  { selector: '.highlight' },
  { selector: '.highlight .c' },
  { selector: '.highlight .err' },
  { selector: '.highlight .k' },
  { selector: '.highlight .o' },
  { selector: '.highlight .cm' },
  { selector: '.highlight .cp' },
  { selector: '.highlight .c1' }
];

// [
//   // console.log(getSelectorParents('.foo .bar'));
//   ('.foo .bar', '.foo', 'div>p')
// ].forEach(selector => {
//   // console.log(getSelectorParents(selector));
//   console.log(`[${selector}] -parent-> [${getSelectorParents(selector)}]`);
// });

var fs = require('fs');

// let SELECTORS_LARGE = JSON.parse(
//   fs.readFileSync('/tmp/selectors.json', 'utf8')
// );

// performance.mark('A');
const t0 = performance.now();
SELECTORS.map(p => p.selector).forEach(selector => {
  // const parent = getSelectorParent2(selector);
  // console.log(`'${selector}' -parent-> '${getSelectorParents(selector)}'`);
  console.log(`'${selector}' -parent-> `, getSelectorParents(selector));
});
const t1 = performance.now();
// console.log(t1 - t0);
// performance.mark('B');
// console.log(performance.measure('A to B', 'A', 'B'));
